{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Austral",
	"patterns": [
		{
			"include": "#module"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#string"
		},
		{
			"include": "#string_triple"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.austral",
					"match": "\\b(if|case|while|for|return)\\b"
				},
				{
					"name": "keyword.other.austral storage.type.constant.austral",
					"match": "\\bconstant\\b"
				},
				{
					"name": "keyword.other.austral",
					"match": "\\b(end\\s+if|end\\s+case|end\\s+while|end\\s+for|end|from|to|do|of|let|then|else|else\\s+if|is|module\\s+body|end\\s+module\\s+body|module|end\\s+module|generic|method|function|instance|pragma|record|union|typeclass|import|when)\\b"
				}
			]
		},
		"comment": {
			"match": "\\s*(--).*",
			"name": "comment.line.austral",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.austral"
				}
			}
		},
		"typespec": {
			"patterns": [
				{
					"comment": "paramterized types",
					"begin": "([a-zA-Z][A-Za-z0-9_]*)(\\[)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.austral"
						},
						"2": {
							"name": "punctuation.brackets.square.austral"
						}
					},
					"end": "]",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.square.austral"
						}
					},
					"patterns": [
						{
							"include": "#typespec"
						},
						{
							"include": "#comment"
						},
						{
							"match": ",",
							"name": "punctuation.comma.austral"
						}
					]
				},
				{
					"comment": "reference types",
					"begin": "(&!)\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "operator.punctuation.borrow-write.austral"
						},
						"2": {
							"name": "punctuation.brackets.square.austral"
						}
					},
					"end": "]",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.angle.austral"
						}
					},
					"patterns": [
						{
							"include": "#context_type_param_list"
						}
					]
				},
				{
					"comment": "primitive types",
					"name": "entity.name.type.primitive.austral",
					"match": "\\b(Bool|((Nat|Int)(8|16|32|64))|Index)\\b"
				},
				{
					"name": "entity.name.type.austral",
					"match": "\\b[a-zA-Z][A-Za-z0-9_]*\\b"
				}
			]
		},
		"context_type_param_list": {
			"patterns": [
				{
					"match": "\\b(Free|Linear|Type|Region)\\b",
					"name": "entity.name.universe.austral entity.name.type.austral"
				},
				{
					"match": ":",
					"name": "punctuation.comma.austral"
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*)",
					"name": "entity.name.type.austral"
				},
				{
					"include": "#comment"
				},
				{
					"match": ",",
					"name": "punctuation.comma.austral"
				},
				{
					"match": "[\\(\\)]",
					"name": "punctuation.brackets.round.austral"
				}
			]
		},
		"slot": {
			"comment": "member values used in records and unions",
			"begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(:)",
			"end": ";",
			"beginCaptures": {
				"1": {
					"name": "entity.name.member.austral"
				},
				"2": {
					"name": "punctuation.colon.austral"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.semicolon.austral"
				}
			},
			"patterns": [
				{
					"include": "#typespec"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"comment": "constant declaration",
					"begin": "(constant)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(:)",
					"end": ";",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.austral storage.type.constant.austral"
						},
						"2": {
							"name": "entity.name.constant.austral"
						},
						"3": {
							"name": "punctuation.colon.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.semicolon.austral"
						}
					},
					"patterns": [
						{
							"include": "#typespec"
						}
					]
				},
				{
					"comment": "type declaration",
					"match": "(type)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(?:(\\[)(.*)(\\]))?\\s*(:)\\s(Free|Linear|Type|Region)\\s*(;)",
					"captures": {
						"1": {
							"name": "keyword.declaration.type.austral storage.type.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "punctuation.brackets.square.austral"
						},
						"4": {
							"patterns": [
								{
									"include": "#context_type_param_list"
								}
							]
						},
						"5": {
							"name": "punctuation.brackets.square.austral"
						},
						"6": {
							"name": "punctuation.colon.austral"
						},
						"7": {
							"name": "entity.name.universe.austral entity.name.type.austral"
						},
						"8": {
							"name": "punctuation.semicolon.austral"
						}
					}
				},
				{
					"comment": "record declaration",
					"begin": "(record)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(?:(\\[)(.*)(\\]))?\\s*(:)\\s(Free|Linear|Type|Region)\\s+(is)",
					"end": "\\bend\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.declaration.record.austral storage.type.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "punctuation.brackets.square.austral"
						},
						"4": {
							"patterns": [
								{
									"include": "#context_type_param_list"
								}
							]
						},
						"5": {
							"name": "punctuation.brackets.square.austral"
						},
						"6": {
							"name": "punctuation.colon.austral"
						},
						"7": {
							"name": "entity.name.universe.austral entity.name.type.austral"
						},
						"8": {
							"name": "storage.type.record.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "keyword.other.austral storage.type.record.austral"
						}
					},
					"patterns": [
						{
							"include": "#string_triple"
						},
						{
							"include": "#slot"
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"comment": "union declaration",
					"begin": "(union)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(?:(\\[)(.*)(\\]))?\\s*(:)\\s(Free|Linear|Type|Region)\\s+(is)",
					"end": "\\bend\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.declaration.union.austral storage.type.union.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "punctuation.brackets.square.austral"
						},
						"4": {
							"patterns": [
								{
									"include": "#context_type_param_list"
								}
							]
						},
						"5": {
							"name": "punctuation.brackets.square.austral"
						},
						"6": {
							"name": "punctuation.colon.austral"
						},
						"7": {
							"name": "entity.name.universe.austral entity.name.type.austral"
						},
						"8": {
							"name": "storage.type.union.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "keyword.other.austral storage.type.union.austral"
						}
					},
					"patterns": [
						{
							"include": "#string_triple"
						},
						{
							"match": "\\b(case)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(;)",
							"captures": {
								"1": {
									"name": "keyword.declaration.case.austral storage.type.case.austral"
								},
								"2": {
									"name": "entity.name.type.austral"
								},
								"3": {
									"name": "punctuation.semicolon.austral"
								}
							}
						},
						{
							"begin": "\\b(case)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s+(is)",
							"end": "(?=case|end)",
							"beginCaptures": {
								"1": {
									"name": "keyword.declaration.case.austral storage.type.case.austral"
								},
								"2": {
									"name": "entity.name.type.austral"
								},
								"3": {
									"name": "storage.type.case.austral"
								}
							},
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#string_triple"
								},
								{
									"include": "#slot"
								}
							]
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"begin": "(generic)\\s*(\\[)",
					"end": "\\]",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.generic.austral"
						},
						"2": {
							"name": "punctuation.brackets.square.austral"
						}
					},
					"patterns": [
						{
							"include": "#context_type_param_list"
						}
					]
				},
				{
					"begin": "(function)\\s+([a-zA-Z][a-zA-Z0-9_]*)",
					"end": ";",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.function.austral"
						},
						"2": {
							"name": "entity.name.function.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.semicolon.austral"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#typespec"
						},
						{
							"name": "punctuation.colon.austral",
							"match": ":"
						},
						{
							"name": "punctuation.brackets.round.austral",
							"match": "[\\(\\)]"
						}
					]
				}
			]
		},
		"module": {
			"patterns": [
				{
					"comment": "module interface",
					"begin": "(module)\\s+([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)\\s+(is)",
					"end": "end\\s+module\\s*\\.",
					"beginCaptures": {
						"1": {
							"name": "storage.type.module.austral"
						},
						"2": {
							"name": "entity.name.module.austral"
						},
						"3": {
							"name": "storage.type.module.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "storage.type.module.austral"
						}
					},
					"patterns": [
						{
							"include": "#declarations"
						}
					]
				}
			]
		},
		"escapes": {
			"comment": "string escape characters",
			"patterns": [
				{
					"name": "constant.character.escape.austral",
					"match": "\\\\(n|r|t|\\| |')"
				},
				{
					"comment": "mark unmatched escapes as illegal",
					"name": "invalid.illegal.escape-sequence.austral",
					"match": "\\\\."
				}
			]
		},
		"string": {
			"name": "string.quoted.double.austral",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.austral",
					"match": "\\\\\""
				},
				{
					"include": "#escapes"
				}
			]
		},
		"string_triple": {
			"name": "string.quoted.triple.austral",
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"patterns": [
				{
					"name": "constant.character.escape.austral",
					"match": "\\\\\"\"\""
				},
				{
					"include": "#escapes"
				}
			]
		}
	},
	"scopeName": "source.austral"
}