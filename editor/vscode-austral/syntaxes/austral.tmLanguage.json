{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Austral",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#module_body"
		},
		{
			"include": "#module"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#string"
		},
		{
			"include": "#string_triple"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.austral",
					"match": "\\b(if|case|while|for|return)\\b"
				},
				{
					"name": "keyword.other.austral storage.type.constant.austral",
					"match": "\\bconstant\\b"
				},
				{
					"name": "keyword.other.austral",
					"match": "\\b(end\\s+if|end\\s+case|end\\s+while|end\\s+for|end|from|to|do|of|let|then|else|else\\s+if|is|module\\s+body|end\\s+module\\s+body|module|end\\s+module|generic|method|function|instance|pragma|record|union|typeclass|import|when)\\b"
				}
			]
		},
		"comment": {
			"match": "\\s*(--).*",
			"name": "comment.line.austral",
			"captures": {
				"1": {
					"name": "punctuation.definition.comment.austral"
				}
			}
		},
		"generic": {
			"begin": "(generic)\\s*(\\[)",
			"end": "\\]",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.generic.austral"
				},
				"2": {
					"name": "punctuation.brackets.square.austral"
				}
			},
			"patterns": [
				{
					"include": "#context_type_param_list"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"include": "#float_constant"
				},
				{
					"include": "#bool_constants"
				},
				{
					"include": "#nil_constant"
				},
				{
					"include": "#integer_constants"
				}
			]
		},
		"assignment": {
			"comment": "the := ...; part of an assignment statement",
			"begin": ":=",
			"end": ";",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.assign.austral"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.semicolon.austral"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#expression"
				}
			]
		},
		"float_constant": {
			"comment": "decimal float constant",
			"match": "([+\\-])?[0-9][0-9']*\\.([0-9][0-9']*)?([eE][+\\-]?[0-9][0-9']*)?",
			"name": "constant.numeric.decimal.float.austral"
		},
		"bool_constants": {
			"comment": "boolean constant",
			"match": "\\b(true|false)\\b",
			"name": "constant.language.bool.austral"
		},
		"nil_constant": {
			"comment": "nil constant",
			"match": "\\bnil\\b",
			"name": "constant.language.nil.austral"
		},
		"integer_constants": {
			"patterns": [
				{
					"comment": "decimal integer constant",
					"match": "([+\\-])?[0-9][0-9']*",
					"captures": {
						"1": {
							"name": "keyword.operator.sign.austral"
						}
					},
					"name": "constant.numeric.decimal.austral"
				},
				{
					"comment": "hexadecimal integer constant",
					"match": "#x[0-9a-fA-F][0-9a-fA-F']*",
					"name": "constant.numeric.hex.austral"
				},
				{
					"comment": "octal integer constant",
					"match": "#o[0-7][0-7']*",
					"name": "constant.numeric.octal.austral"
				},
				{
					"comment": "binary integer constant",
					"match": "#b[0-1][0-1']*",
					"name": "constant.numeric.bin.austral"
				},
				{
					"comment": "char (Nat8) constant",
					"name": "string.quoted.single.char.austral",
					"begin": "'",
					"end": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.char.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.char.austral"
						}
					},
					"patterns": [
						{
							"include": "#escapes"
						},
						{
							"match": ".{2,}(?=')",
							"name": "invalid.illegal.char-literal.austral"
						},
						{
							"comment": "Valid ASCII chars for char constants",
							"match": "[a-zA-Z0-9\\ \\!\"#\\$%&'\\)\\(*+,\\-\\./:;<=>?@`~\\[\\]^_{}|]"
						},
						{
							"match": ".*(?=')",
							"name": "invalid.illegal.char-literal.austral"
						}
					]
				}
			]
		},
		"path": {
			"patterns": [
				{
					"comment": "array access",
					"begin": "(?<=[\\)\\]a-zA-Z0-9_])(\\[)",
					"end": "\\]",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.begin.bracket.square.c"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.square.c"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"comment": "slot access (including pointer)",
					"match": "(?<=[\\)\\]a-zA-Z0-9_])(?:(\\.)|(->))([a-zA-Z][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "punctuation.separator.slot-access.austral"
						},
						"2": {
							"name": "punctuation.separator.pointer-slot-access.austral"
						},
						"3": {
							"name": "variable.other.member.austral"
						}
					}
				}
			]
		},
		"function_call": {
			"begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(\\()",
			"end": "\\)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.austral"
				},
				"2": {
					"name": "punctuation.section.arguments.begin.bracket.round.austral"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.section.arguments.begin.bracket.round.austral"
				}
			},
			"patterns": [
				{
					"comment": "named paramater assignment",
					"match": "\\b([a-zA-Z][a-zA-Z0-9_]*)\\s*(=>)",
					"captures": {
						"1": {
							"name": "variable.parameter.function-call.austral"
						},
						"2": {
							"name": "keyword.operator.assignment.named-paramater.austral"
						}
					}
				},
				{
					"include": "#expression"
				},
				{
					"name": "punctuation.separator.delimiter.comma.austal",
					"match": ","
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"comment": "logical operators",
					"match": "\\b(not|and|or)\\b",
					"name": "keyword.operator.logical.$0.austral"
				},
				{
					"comment": "comparison operators",
					"match": "(=|/=|<=|<|>=|>)",
					"name": "keyword.operator.comparison.austral"
				},
				{
					"comment": "borrow operators",
					"match": "(&|&!)",
					"name": "keyword.operator.borrow.austral"
				},
				{
					"comment": "arithmetic operators",
					"match": "(\\+|-|/|\\*)",
					"name": "keyword.operator.arithmetic.austral"
				}
			]
		},
		"expression_keywords": {
			"patterns": [
				{
					"match": "\\b(if|then|else)\\b",
					"name": "keyword.control.inline.austral"
				},
				{
					"match": "\\bsizeof\\b",
					"name": "keyword.operator.sizeof.austral keyword.other.sizeof.austral"
				},
				{
					"match": "(\\@embed)",
					"name": "keyword.operator.embed.austral keyword.other.embed.austral"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#expression_keywords"
				},
				{
					"match": "(:)\\s*([a-zA-Z][a-zA-Z0-9_]*(?:\\[.*\\])?)",
					"captures": {
						"1": {
							"name": "keyword.operator.typecast.austral"
						},
						"2": {
							"patterns": [
								{
									"include": "#typespec"
								}
							]
						}
					}
				},
				{
					"comment": "sub-expression",
					"begin": "\\(",
					"end": "\\)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.expression.begin.bracket.round.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.section.expression.begin.bracket.round.austral"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"comment": "sizeof operator",
					"begin": "\\b(sizeof)\\s*(\\()",
					"end": "\\)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.sizeof.austral"
						},
						"2": {
							"name": "punctuation.section.arguments.begin.bracket.round.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.section.arguments.begin.bracket.round.austral"
						}
					},
					"patterns": [
						{
							"include": "#typespec"
						}
					]
				},
				{
					"include": "#function_call"
				},
				{
					"match": "\\b([a-zA-Z][a-zA-Z0-9_]*)\\b",
					"name": "variable.other.austral"
				},
				{
					"include": "#path"
				}
			]
		},
		"typespec": {
			"patterns": [
				{
					"comment": "paramterized types",
					"begin": "([a-zA-Z][A-Za-z0-9_]*)(\\[)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.austral"
						},
						"2": {
							"name": "punctuation.brackets.square.austral"
						}
					},
					"end": "]",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.square.austral"
						}
					},
					"patterns": [
						{
							"include": "#typespec"
						},
						{
							"include": "#comment"
						},
						{
							"match": ",",
							"name": "punctuation.comma.austral"
						}
					]
				},
				{
					"comment": "reference types",
					"begin": "(&!)\\s*(\\[)",
					"beginCaptures": {
						"1": {
							"name": "operator.punctuation.borrow-write.austral"
						},
						"2": {
							"name": "punctuation.brackets.square.austral"
						}
					},
					"end": "]",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.angle.austral"
						}
					},
					"patterns": [
						{
							"include": "#context_type_param_list"
						}
					]
				},
				{
					"comment": "primitive types",
					"name": "entity.name.type.primitive.austral",
					"match": "\\b(Bool|((Nat|Int)(8|16|32|64))|Index)\\b"
				},
				{
					"name": "entity.name.type.austral",
					"match": "\\b[a-zA-Z][A-Za-z0-9_]*\\b"
				}
			]
		},
		"context_type_param_list": {
			"patterns": [
				{
					"match": "\\b(Free|Linear|Type|Region)\\b",
					"name": "entity.name.universe.austral entity.name.type.austral"
				},
				{
					"match": ":",
					"name": "punctuation.comma.austral"
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*)",
					"name": "entity.name.type.austral"
				},
				{
					"include": "#comment"
				},
				{
					"match": ",",
					"name": "punctuation.comma.austral"
				},
				{
					"match": "[\\(\\)]",
					"name": "punctuation.brackets.round.austral"
				}
			]
		},
		"slot": {
			"comment": "member values used in records and unions",
			"begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(:)",
			"end": ";",
			"beginCaptures": {
				"1": {
					"name": "entity.name.member.austral"
				},
				"2": {
					"name": "punctuation.colon.austral"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.semicolon.austral"
				}
			},
			"patterns": [
				{
					"include": "#typespec"
				}
			]
		},
		"constant_decl": {
			"comment": "constant declaration",
			"match": "(constant)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(:)\\s*([a-zA-Z][a-zA-Z0-9_]*(?:\\[(.*)\\])?)",
			"captures": {
				"1": {
					"name": "keyword.other.austral storage.type.constant.austral"
				},
				"2": {
					"name": "entity.name.constant.austral"
				},
				"3": {
					"name": "punctuation.colon.austral"
				},
				"4": {
					"patterns": [
						{
							"include": "#typespec"
						}
					]
				}
			}
		},
		"record_def": {
			"comment": "record declaration",
			"begin": "(record)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(?:(\\[)(.*)(\\]))?\\s*(:)\\s(Free|Linear|Type|Region)\\s+(is)",
			"end": "\\bend\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.declaration.record.austral storage.type.austral"
				},
				"2": {
					"name": "entity.name.type.austral"
				},
				"3": {
					"name": "punctuation.brackets.square.austral"
				},
				"4": {
					"patterns": [
						{
							"include": "#context_type_param_list"
						}
					]
				},
				"5": {
					"name": "punctuation.brackets.square.austral"
				},
				"6": {
					"name": "punctuation.colon.austral"
				},
				"7": {
					"name": "entity.name.universe.austral entity.name.type.austral"
				},
				"8": {
					"name": "storage.type.record.austral keyword.other.is.austral"
				}
			},
			"endCaptures": {
				"0": {
					"name": "keyword.other.end.austral storage.type.record.austral"
				}
			},
			"patterns": [
				{
					"include": "#string_triple"
				},
				{
					"include": "#slot"
				},
				{
					"include": "#comment"
				}
			]
		},
		"union_def": {
			"comment": "union declaration",
			"begin": "(union)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(?:(\\[)(.*)(\\]))?\\s*(:)\\s(Free|Linear|Type|Region)\\s+(is)",
			"end": "\\bend\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.declaration.union.austral storage.type.union.austral"
				},
				"2": {
					"name": "entity.name.type.austral"
				},
				"3": {
					"name": "punctuation.brackets.square.austral"
				},
				"4": {
					"patterns": [
						{
							"include": "#context_type_param_list"
						}
					]
				},
				"5": {
					"name": "punctuation.brackets.square.austral"
				},
				"6": {
					"name": "punctuation.colon.austral"
				},
				"7": {
					"name": "entity.name.universe.austral entity.name.type.austral"
				},
				"8": {
					"name": "storage.type.union.austral keyword.other.is.austral"
				}
			},
			"endCaptures": {
				"0": {
					"name": "keyword.other.end.austral storage.type.union.austral"
				}
			},
			"patterns": [
				{
					"include": "#string_triple"
				},
				{
					"match": "\\b(case)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(;)",
					"captures": {
						"1": {
							"name": "keyword.declaration.case.austral storage.type.case.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "punctuation.semicolon.austral"
						}
					}
				},
				{
					"begin": "\\b(case)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s+(is)",
					"end": "(?=case|end)",
					"beginCaptures": {
						"1": {
							"name": "keyword.declaration.case.austral storage.type.case.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "storage.type.case.austral"
						}
					},
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#string_triple"
						},
						{
							"include": "#slot"
						}
					]
				},
				{
					"include": "#comment"
				}
			]
		},
		"context_function_paramater_def": {
			"name": "meta.function.parameters.austral",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(:)",
					"captures": {
						"1": {
							"name": "variable.parameter.austral"
						},
						"2": {
							"name": "punctuation.colon.austral"
						}
					}
				},
				{
					"include": "#typespec"
				},
				{
					"name": "punctuation.brackets.round.austral",
					"match": "[\\(\\)]"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"include": "#constant_decl"
				},
				{
					"include": "#record_def"
				},
				{
					"include": "#union_def"
				},
				{
					"comment": "type declaration",
					"match": "(type)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(?:(\\[)(.*)(\\]))?\\s*(:)\\s(Free|Linear|Type|Region)\\s*(;)",
					"captures": {
						"1": {
							"name": "keyword.declaration.type.austral storage.type.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "punctuation.brackets.square.austral"
						},
						"4": {
							"patterns": [
								{
									"include": "#context_type_param_list"
								}
							]
						},
						"5": {
							"name": "punctuation.brackets.square.austral"
						},
						"6": {
							"name": "punctuation.colon.austral"
						},
						"7": {
							"name": "entity.name.universe.austral entity.name.type.austral"
						},
						"8": {
							"name": "punctuation.semicolon.austral"
						}
					}
				},
				{
					"include": "#generic"
				},
				{
					"match": "(function)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(\\()(.*)(\\))\\s*(:)\\s*([a-zA-Z][a-zA-Z0-9_]*(?:\\[(.*)\\])?)",
					"captures": {
						"1": {
							"name": "keyword.other.method.austral"
						},
						"2": {
							"name": "entity.name.function.method.austral"
						},
						"3": {
							"name": "punctuation.section.parameters.begin.bracket.round.austral"
						},
						"4": {
							"patterns": [
								{
									"include": "#context_function_paramater_def"
								}
							]
						},
						"5": {
							"name": "punctuation.section.parameters.end.bracket.round.austral"
						},
						"6": {
							"name": "punctuation.definition.function.return-type.austral"
						},
						"7": {
							"name": "meta.return-type.austral",
							"patterns": [
								{
									"include": "#typespec"
								}
							]
						}
					}
				},
				{
					"comment": "typeclass declaration",
					"begin": "(typeclass)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(?:(\\()(.*)(\\)))?\\s+(is)",
					"end": "\\b(end)",
					"beginCaptures": {
						"1": {
							"name": "keyword.declaration.typeclass.austral storage.type.typeclass.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "punctuation.brackets.round.austral"
						},
						"4": {
							"patterns": [
								{
									"include": "#context_type_param_list"
								}
							]
						},
						"5": {
							"name": "punctuation.brackets.round.austral"
						},
						"6": {
							"name": "storage.type.typeclass.austral keyword.other.is.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "keyword.other.end.austral storage.type.union.austral"
						}
					},
					"patterns": [
						{
							"include": "#string_triple"
						},
						{
							"begin": "(method)\\s+([a-zA-Z][a-zA-Z0-9_]*)",
							"end": ";",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.method.austral"
								},
								"2": {
									"name": "entity.name.function.method.austral"
								}
							},
							"endCaptures": {
								"0": {
									"name": "punctuation.section.parameters.end.bracket.round.austral"
								}
							},
							"patterns": [
								{
									"include": "#context_function_paramater_def"
								}
							]
						},
						{
							"include": "#comment"
						}
					]
				},
				{
					"match": "\\b(instance)\\s+([a-zA-Z][a-zA-Z0-9_]*)\\s*(\\()(.*)(\\))\\s*(;)",
					"captures": {
						"1": {
							"name": "keyword.other.instance.austral"
						},
						"2": {
							"name": "entity.name.type.austral"
						},
						"3": {
							"name": "punctuation.brackets.round.austral"
						},
						"4": {
							"patterns": [
								{
									"include": "#typespec"
								}
							]
						},
						"5": {
							"name": "punctuation.brackets.round.austral"
						},
						"6": {
							"name": "punctuation.semicolon.austral"
						}
					}
				}
			]
		},
		"module": {
			"patterns": [
				{
					"comment": "module interface",
					"begin": "(module)\\s+([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)\\s+(is)",
					"end": "end\\s+module\\s*\\.",
					"beginCaptures": {
						"1": {
							"name": "storage.type.module.austral"
						},
						"2": {
							"name": "entity.name.module.austral"
						},
						"3": {
							"name": "storage.type.module.austral keyword.other.is.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "storage.type.module.austral"
						}
					},
					"patterns": [
						{
							"include": "#declarations"
						}
					]
				}
			]
		},
		"module_body": {
			"patterns": [
				{
					"comment": "module body",
					"begin": "(module\\s+body)\\s+([a-zA-Z][a-zA-Z0-9_]*(?:\\.[a-zA-Z][a-zA-Z0-9_]*)*)\\s+(is)",
					"end": "end\\s+module\\s+body\\s*\\.",
					"beginCaptures": {
						"1": {
							"name": "storage.type.module.austral"
						},
						"2": {
							"name": "entity.name.module.austral"
						},
						"3": {
							"name": "storage.type.module.austral keyword.other.is.austral"
						}
					},
					"endCaptures": {
						"0": {
							"name": "storage.type.module.austral"
						}
					},
					"patterns": [
						{
							"include": "#declarations"
						},
						{
							"include": "#assignment"
						}
					]
				}
			]
		},
		"escapes": {
			"comment": "string escape characters",
			"patterns": [
				{
					"name": "constant.character.escape.austral",
					"match": "\\\\(n|r|t|\\\\| |')"
				},
				{
					"comment": "mark unmatched escapes as illegal",
					"name": "invalid.illegal.escape-sequence.austral",
					"match": "\\\\."
				}
			]
		},
		"string": {
			"name": "string.quoted.double.austral",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.austral",
					"match": "\\\\\""
				},
				{
					"include": "#escapes"
				}
			]
		},
		"string_triple": {
			"name": "string.quoted.triple.austral",
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"patterns": [
				{
					"name": "constant.character.escape.austral",
					"match": "\\\\\"\"\""
				},
				{
					"include": "#escapes"
				}
			]
		}
	},
	"scopeName": "source.austral"
}