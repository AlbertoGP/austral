import Standard.Buffer (
    Buffer,
    allocateEmpty,
    destroyEmpty,
    initialize,
    length,
    nth,
    destroyFree,
    fill,
    storeNth,
    swapNth,
    swapIndex,
    insert,
    insertFront,
    insertBack,
    remove,
    removeFirst,
    removeLast,
    reverse,
    swapTransform
);
import Standard.Test.Unit (
    assertTrue,
    assertSuccess,
    assertFailure,
    suiteHeading,
    testHeading
);

module body Standard.Test.Buffer is
    function bufferTestSuite(): Unit is
        suiteHeading("Standard.Buffer");
        basicLifecycleTest();
        initializeTest();
        storeTest();
        swapNthTest();
        swapIndexTest();
        swapTransformTest();
        fillTest();
        insertFrontTest();
        insertBackTest();
        removeFirstTest();
        removeLastTest();
        reverseEmptyTest();
        reverseNonEmptyTest();
        return nil;
    end;

    function basicLifecycleTest(): Unit is
        testHeading("Basic lifecycle: allocateEmpty and destroyEmpty");
        let b: Buffer[Int32] := allocateEmpty();
        destroyEmpty(b);
        assertSuccess("Basic lifecycle done.");
        return nil;
    end;

    function initializeTest(): Unit is
        testHeading("initialize, length, nth, and destroyFree");
        let b: Buffer[Int32] := initialize(3, 10);
        assertLength(&b, 3);
        assertTrue(nth(&b, 0) = 10, "[0] = 10");
        assertTrue(nth(&b, 1) = 10, "[1] = 10");
        assertTrue(nth(&b, 2) = 10, "[2] = 10");
        destroyFree(b);
        assertSuccess("destroyFree complete");
        return nil;
    end;

    function storeTest(): Unit is
        testHeading("storeNth");
        let b: Buffer[Int32] := initialize(1, 10);
        assertLength(&b, 1);
        assertTrue(nth(&b, 0) = 10, "[0] = 10");
        storeNth(&!b, 0, 20);
        assertTrue(nth(&b, 0) = 20, "[0] = 20");
        destroyFree(b);
        assertSuccess("destroyFree complete");
        return nil;
    end;

    function swapNthTest(): Unit is
        testHeading("swapNth");
        let b: Buffer[Int32] := initialize(1, 10);
        assertLength(&b, 1);
        assertTrue(nth(&b, 0) = 10, "[0] = 10");
        let old: Int32 := swapNth(&!b, 0, 20);
        assertTrue(old = 10, "old = 10");
        assertTrue(nth(&b, 0) = 20, "[0] = 20");
        destroyFree(b);
        assertSuccess("destroyFree complete");
        return nil;
    end;

    function swapIndexTest(): Unit is
        testHeading("swapIndex");
        let b: Buffer[Int32] := initialize(2, 0);
        assertLength(&b, 2);
        storeNth(&!b, 0, 10);
        storeNth(&!b, 1, 20);
        assertTrue(nth(&b, 0) = 10, "[0] = 10");
        assertTrue(nth(&b, 1) = 20, "[1] = 20");
        swapIndex(&!b, 0, 1);
        assertTrue(nth(&b, 0) = 20, "[0] = 20");
        assertTrue(nth(&b, 1) = 10, "[1] = 10");
        destroyFree(b);
        assertSuccess("destroyFree complete");
        return nil;
    end;

    function double(i: Int32): Int32 is
        return 2 * i;
    end;

    function swapTransformTest(): Unit is
        testHeading("swapTransform");
        let b: Buffer[Int32] := initialize(1, 30);
        assertLength(&b, 1);
        swapTransform(&!b, 0, double);
        assertTrue(nth(&b, 0) = 60, "[0] = 60");
        destroyFree(b);
        assertSuccess("destroyFree complete");
        return nil;
    end;

    function fillTest(): Unit is
        testHeading("initialize then fill");
        let b: Buffer[Int32] := initialize(3, 10);
        fill(&!b, 20);
        assertLength(&b, 3);
        assertTrue(nth(&b, 0) = 20, "[0] = 20");
        assertTrue(nth(&b, 1) = 20, "[1] = 20");
        assertTrue(nth(&b, 2) = 20, "[2] = 20");
        destroyFree(b);
        assertSuccess("destroyFree complete");
        return nil;
    end;

    function insertFrontTest(): Unit is
        testHeading("insertFront");
        let b: Buffer[Int32] := allocateEmpty();
        -- []
        assertLength(&b, 0);
        -- [3]
        insertFront(&!b, 3);
        assertLength(&b, 1);
        assertNth(&b, 0, 3);
        -- [2, 3]
        insertFront(&!b, 2);
        assertLength(&b, 2);
        assertNth(&b, 0, 2);
        assertNth(&b, 1, 3);
        -- [1,2,3]
        insertFront(&!b, 1);
        assertLength(&b, 3);
        assertNth(&b, 0, 1);
        assertNth(&b, 1, 2);
        assertNth(&b, 2, 3);
        destroyFree(b);
        return nil;
    end;

    function insertBackTest(): Unit is
        testHeading("insertBack");
        let b: Buffer[Int32] := allocateEmpty();
        -- []
        assertLength(&b, 0);
        -- [1]
        insertBack(&!b, 1);
        assertLength(&b, 1);
        assertNth(&b, 0, 1);
        -- [1, 2]
        insertBack(&!b, 2);
        assertLength(&b, 2);
        assertNth(&b, 0, 1);
        assertNth(&b, 1, 2);
        -- [1,2,3]
        insertBack(&!b, 3);
        assertLength(&b, 3);
        assertNth(&b, 0, 1);
        assertNth(&b, 1, 2);
        assertNth(&b, 2, 3);
        destroyFree(b);
        return nil;
    end;

    function removeFirstTest(): Unit is
        testHeading("removeFirst");
        let b: Buffer[Int32] := allocateEmpty();
        -- []
        assertLength(&b, 0);
        insertBack(&!b, 1);
        insertBack(&!b, 2);
        insertBack(&!b, 3);
        -- [1,2,3]
        assertLength(&b, 3);
        assertNth(&b, 0, 1);
        assertNth(&b, 1, 2);
        assertNth(&b, 2, 3);
        -- [2,3]
        removeFirst(&!b);
        assertLength(&b, 2);
        assertNth(&b, 0, 2);
        assertNth(&b, 1, 3);
        -- [3]
        removeFirst(&!b);
        assertLength(&b, 1);
        assertNth(&b, 0, 3);
        -- []
        removeFirst(&!b);
        assertLength(&b, 0);
        destroyEmpty(b);
        return nil;
    end;

    function removeLastTest(): Unit is
        testHeading("removeLast");
        let b: Buffer[Int32] := allocateEmpty();
        -- []
        assertLength(&b, 0);
        insertBack(&!b, 1);
        insertBack(&!b, 2);
        insertBack(&!b, 3);
        -- [1,2,3]
        assertLength(&b, 3);
        assertNth(&b, 0, 1);
        assertNth(&b, 1, 2);
        assertNth(&b, 2, 3);
        -- [1,2]
        removeLast(&!b);
        assertLength(&b, 2);
        assertNth(&b, 0, 1);
        assertNth(&b, 1, 2);
        -- [1]
        removeLast(&!b);
        assertLength(&b, 1);
        assertNth(&b, 0, 1);
        -- []
        removeLast(&!b);
        assertLength(&b, 0);
        destroyEmpty(b);
        return nil;
    end;

    function reverseEmptyTest(): Unit is
        testHeading("reverse (empty)");
        -- Test empty array
        let b: Buffer[Int32] := allocateEmpty();
        assertLength(&b, 0);
        reverse(&!b);
        assertLength(&b, 0);
        destroyFree(b);
        return nil;
    end;

    function reverseNonEmptyTest(): Unit is
        testHeading("reverse (non-empty)");
        -- Test non-empty array
        let b: Buffer[Int32] := allocateEmpty();
        insertBack(&!b, 1);
        insertBack(&!b, 2);
        insertBack(&!b, 3);
        -- [1,2,3]
        assertLength(&b, 3);
        assertNth(&b, 0, 1);
        assertNth(&b, 1, 2);
        assertNth(&b, 2, 3);
        reverse(&!b);
        -- [3,2,1]
        assertLength(&b, 3);
        assertNth(&b, 0, 3);
        assertNth(&b, 1, 2);
        assertNth(&b, 2, 1);
        destroyFree(b);
        return nil;
    end;

    ---
    --- Utilities
    ---

    generic [T: Type, R: Region]
    function assertLength(ref: &[Buffer[T], R], len: Index): Unit is
        assertTrue(length(ref) = len, "length");
        return nil;
    end;

    generic [T: Free, R: Region]
    function assertNth(ref: &[Buffer[T], R], pos: Index, value: T): Unit is
        assertTrue(nth(ref, pos) = value, "nth");
        return nil;
    end;
end module body.