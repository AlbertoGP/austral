--
-- Part of the Austral project, under the Apache License v2.0 with LLVM Exceptions.
-- See LICENSE file for details.
--
-- SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
--
import Standard.Tuples (
    Pair,
    Triple,
    Tuple4,
    Tuple5,
    Tuple6
);
import Standard.Test.Unit (
    assertTrue,
    suiteHeading,
    testHeading
);

module body Standard.Test.Tuples is
    function tuplesTestSuite(): Unit is
        suiteHeading("Standard.Tuples");
        pairTest();
        tripleTest();
        quadrupleTest();
        quintupleTest();
        return nil;
    end;

    function pairTest(): Unit is
        testHeading("Pair");
        let p: Pair[Bool, Int32] := Pair(first => false, second => 10);
        assertTrue((p.first) = false, "`first` is false");
        assertTrue((p.second) = 10, "`second` is 10");
        return nil;
    end;

    function tripleTest(): Unit is
        testHeading("Triple");
        let t: Triple[Int32, Int32, Int32] := Triple(
            first => 1,
            second => 2,
            third => 3
        );
        assertTrue((t.first) = 1, "`first` is 1");
        assertTrue((t.second) = 2, "`second` is 2");
        assertTrue((t.third) = 3, "`third` is 3");
        return nil;
    end;

    function quadrupleTest(): Unit is
        testHeading("Tuple4");
        let t: Tuple4[Int32, Int32, Int32, Int32] := Tuple4(
            first => 1,
            second => 2,
            third => 3,
            fourth => 4
        );
        assertTrue((t.first) = 1, "`first` is 1");
        assertTrue((t.second) = 2, "`second` is 2");
        assertTrue((t.third) = 3, "`third` is 3");
        assertTrue((t.fourth) = 4, "`fourth` is 4");
        return nil;
    end;

    function quintupleTest(): Unit is
        testHeading("Tuple5");
        let t: Tuple5[Int32, Int32, Int32, Int32, Int32] := Tuple5(
            first => 1,
            second => 2,
            third => 3,
            fourth => 4,
            fifth => 5
        );
        assertTrue((t.first) = 1, "`first` is 1");
        assertTrue((t.second) = 2, "`second` is 2");
        assertTrue((t.third) = 3, "`third` is 3");
        assertTrue((t.fourth) = 4, "`fourth` is 4");
        assertTrue((t.fifth) = 5, "`fifth` is 5");
        return nil;
    end;

    function sextupleTest(): Unit is
        testHeading("Tuple6");
        let t: Tuple6[Int32, Int32, Int32, Int32, Int32, Int32] := Tuple6(
            first => 1,
            second => 2,
            third => 3,
            fourth => 4,
            fifth => 5,
            sixth => 6
        );
        assertTrue((t.first) = 1, "`first` is 1");
        assertTrue((t.second) = 2, "`second` is 2");
        assertTrue((t.third) = 3, "`third` is 3");
        assertTrue((t.fourth) = 4, "`fourth` is 4");
        assertTrue((t.fifth) = 5, "`fifth` is 5");
        assertTrue((t.sixth) = 6, "`sixth` is 6");
        return nil;
    end;
end module body.