--
-- Part of the Austral project, under the Apache License v2.0 with LLVM Exceptions.
-- See LICENSE file for details.
--
-- SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
--
import Standard.ByteString (
    ByteString,
    makeEmpty,
    makeByteString,
    destroyByteString,
    fromLiteral,
    length,
    nth,
    storeNth
);
import Standard.Test.Unit (
    assertTrue,
    assertSuccess,
    assertFailure,
    suiteHeading,
    testHeading
);

module body Standard.Test.ByteString is
    function byteStringTestSuite(): Unit is
        suiteHeading("Standard.ByteString");
        makeEmptyTest();
        makeByteStringTest();
        fromLiteralTest();
        storeNthTest();
        return nil;
    end;

    function makeEmptyTest(): Unit is
        testHeading("makeEmpty and destroyByteString");
        let str: ByteString := makeEmpty();
        assertLength(&str, 0);
        destroyByteString(str);
        assertSuccess("makeEmpty and destroyByteString complete");
        return nil;
    end;

    function makeByteStringTest(): Unit is
        testHeading("makeByteString and destroyByteString");
        let b: ByteString := makeByteString(4, 'a');
        assertLength(&b, 4);
        assertTrue(nth(&b, 0) = 'a', "[0] = a");
        assertTrue(nth(&b, 1) = 'a', "[1] = a");
        assertTrue(nth(&b, 2) = 'a', "[2] = a");
        assertTrue(nth(&b, 3) = 'a', "[3] = a");
        destroyByteString(b);
        assertSuccess("destroyByteString complete");
        return nil;
    end;
  
    function fromLiteralTest(): Unit is
        testHeading("fromLiteral");
        let s: ByteString := fromLiteral("Hello, World!");
        assertLength(&s, 13);
        assertTrue(nth(&s, 0) = 'H', "[0] = H");
        assertTrue(nth(&s, 1) = 'e', "[1] = e");
        assertTrue(nth(&s, 2) = 'l', "[2] = l");
        assertTrue(nth(&s, 3) = 'l', "[3] = l");
        assertTrue(nth(&s, 4) = 'o', "[4] = o");
        assertTrue(nth(&s, 5) = ',', "[5] = ,");
        assertTrue(nth(&s, 6) = ' ', "[6] =  ");
        assertTrue(nth(&s, 7) = 'W', "[7] = W");
        assertTrue(nth(&s, 8) = 'o', "[8] = o");
        assertTrue(nth(&s, 9) = 'r', "[9] = r");
        assertTrue(nth(&s, 10) = 'l', "[10] = l");
        assertTrue(nth(&s, 11) = 'd', "[11] = d");
        assertTrue(nth(&s, 12) = '!', "[12] = !");
        destroyByteString(s);
        assertSuccess("destroyByteString complete");
        return nil;
    end;

    function storeNthTest(): Unit is
        testHeading("storeNth");
        let b: ByteString := makeByteString(3, 'a');
        assertLength(&b, 3);
        assertTrue(nth(&b, 0) = 'a', "[0] = a");
        assertTrue(nth(&b, 1) = 'a', "[1] = a");
        assertTrue(nth(&b, 2) = 'a', "[2] = a");
        storeNth(&!b, 0, 'b');
        assertTrue(nth(&b, 0) = 'b', "[0] = b");
        destroyByteString(b);
        assertSuccess("destroyByteString complete");
        return nil;
    end;

    ---
    --- Utilities
    ---

    generic [R: Region]
    function assertLength(ref: &[ByteString, R], len: Index): Unit is
        assertTrue(length(ref) = len, "length");
        return nil;
    end;

    generic [R: Region]
    function assertNth(ref: &[ByteString, R], pos: Index, value: Nat8): Unit is
        assertTrue(nth(ref, pos) = value, "nth");
        return nil;
    end;
end module body.