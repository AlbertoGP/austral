name: Build and Test
on:
  - push

jobs:
  build-and-test-linux:
    strategy:
      fail-fast: true

    runs-on:
      - ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: get cache key
        id: cache-key
        run: echo "cache-key=$(sha256sum shell.nix | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: cache nix store
        uses: actions/cache@v3.0.8
        id: nix-cache
        with:
          path: /tmp/nixcache
          key: ${{ steps.cache-key.outputs.cache-key }}

      - uses: cachix/install-nix-action@v20
        name: install nix
        with:
          nix_path: nixpkgs=channel:nixos-23.05

      - name: restore nix store from cache
        if: "steps.nix-cache.outputs.cache-hit == 'true'"
        run: "nix-store --import < /tmp/nixcache"

      - name: set up nix shell
        run: nix-shell --command 'true'

      - name: make
        run: nix-shell --command 'make'

      - name: make test
        run: nix-shell --command 'make test'

      - name: end-to-end tests
        run: nix-shell --command 'python test-programs/runner.py'

      - name: examples
        run: nix-shell --command 'bash run-examples.sh'

      - name: build the stdlib
        run: nix-shell --command 'make -C standard clean && make -C standard'

      - name: test the stdlib
        run: nix-shell --command './standard/test_bin'

      - name: upload compiler binary
        uses: actions/upload-artifact@v2
        with:
          name: austral-linux-bin
          path: austral
          retention-days: 1

      - name: clean
        run: make clean

      - name: assert executable does not exist
        run: test ! -f austral

      - name: save nix store to cache
        if: "steps.nix-cache.outputs.cache-hit != 'true'"
        run: "nix-store --export $(find /nix/store -maxdepth 1 -name '*-*') > /tmp/nixcache"